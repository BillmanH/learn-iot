apiVersion: apps/v1
kind: Deployment
metadata:
  name: mosquitto-sub
  namespace: default
  labels:
    app: mosquitto-sub
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mosquitto-sub
  template:
    metadata:
      labels:
        app: mosquitto-sub
    spec:
      # Use the same service account as Sputnik for SAT authentication
      serviceAccountName: mqtt-client
      
      containers:
      - name: mosquitto-sub
        image: eclipse-mosquitto:2.0
        
        # Run mosquitto_sub in a loop to keep the container running
        # The -v flag shows the topic name with each message
        command:
          - sh
          - -c
          - |
            echo "=================================================="
            echo "Mosquitto MQTT Subscriber"
            echo "=================================================="
            echo ""
            echo "Configuration:" 
            echo "  Broker: ${MQTT_BROKER}:${MQTT_PORT}"
            echo "  Topic: ${MQTT_TOPIC}"
            echo "  QoS: ${MQTT_QOS}"
            echo "  Auth: K8S-SAT (ServiceAccountToken)"
            echo ""
            echo "Connecting to broker..."
            echo "Debug: Checking SAT token..."
            if [ -f /var/run/secrets/tokens/broker-sat ]; then
              TOKEN_SIZE=$(wc -c < /var/run/secrets/tokens/broker-sat)
              echo "  ✓ SAT token found (${TOKEN_SIZE} bytes)"
            else
              echo "  ✗ SAT token NOT found!"
              exit 1
            fi
            
            echo "Debug: Testing network connectivity to broker..."
            if nc -zv ${MQTT_BROKER} ${MQTT_PORT} 2>&1; then
              echo "  ✓ Broker reachable at ${MQTT_BROKER}:${MQTT_PORT}"
            else
              echo "  ✗ Cannot reach broker (but will try MQTT connection anyway)"
            fi
            
            echo "Debug: Token preview (first 50 chars)..."
            head -c 50 /var/run/secrets/tokens/broker-sat
            echo ""
            echo "" 
            
            # Subscribe to the topic with K8S-SAT authentication
            # Note: The broker service name is 'aio-broker' (NOT aio-broker-frontend)
            # This has been verified and should not be changed.
            # Using --insecure to skip certificate verification (we're in-cluster)
            # Using --debug for connection troubleshooting
            # CRITICAL: Must use -V mqttv5 for K8S-SAT enhanced authentication
            mosquitto_sub \
              -V mqttv5 \
              --host ${MQTT_BROKER} \
              --port ${MQTT_PORT} \
              --topic "${MQTT_TOPIC}" \
              --qos ${MQTT_QOS} \
              --verbose \
              --debug \
              --insecure \
              -D CONNECT authentication-method 'K8S-SAT' \
              -D CONNECT authentication-data "$(cat /var/run/secrets/tokens/broker-sat)"
        
        env:
        # MQTT Broker configuration
        - name: MQTT_BROKER
          value: "aio-broker.azure-iot-operations.svc.cluster.local"
        - name: MQTT_PORT
          value: "18883"
        
        # Topic to subscribe to (supports MQTT wildcards)
        # Examples:
        #   sputnik/beep      - Exact topic
        #   sputnik/#         - All topics under sputnik/
        #   devices/+/temp    - Temperature from all devices
        #   #                 - All topics (see everything!)
        - name: MQTT_TOPIC
          value: "#"  # Subscribe to ALL topics
        
        # Quality of Service (0=at most once, 1=at least once, 2=exactly once)
        - name: MQTT_QOS
          value: "1"
        
        volumeMounts:
        # ServiceAccountToken for K8S-SAT authentication
        # Kubernetes automatically mounts and renews this token
        - name: broker-sat
          mountPath: /var/run/secrets/tokens
          readOnly: true
        
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      
      volumes:
      # ServiceAccountToken volume with audience matching broker config
      # The token is automatically generated and renewed by Kubernetes
      - name: broker-sat
        projected:
          sources:
          - serviceAccountToken:
              path: broker-sat
              audience: aio-internal  # Must match BrokerAuthentication audience
              expirationSeconds: 86400  # 24 hours
