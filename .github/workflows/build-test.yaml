name: Build and Test IoT Applications

on:
  pull_request:
    branches:
      - main
      - dev
    paths:
      - 'iotopps/**'
  workflow_dispatch:
    inputs:
      app_folder:
        description: 'Application folder to build (leave empty for all)'
        required: false
        type: string

jobs:
  detect-apps:
    name: Detect Applications to Build
    runs-on: ubuntu-latest
    outputs:
      apps: ${{ steps.detect.outputs.apps }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect applications
        id: detect
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ inputs.app_folder }}" ]; then
            # Manual trigger with specific app
            APPS='["${{ inputs.app_folder }}"]'
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            # PR - detect changed apps
            git fetch origin ${{ github.base_ref }}
            CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
            echo "Changed files:"
            echo "$CHANGED_FILES"
            
            APPS=$(echo "$CHANGED_FILES" | grep '^iotopps/' | cut -d'/' -f2 | sort -u | grep -v '^$' || true)
            
            # Filter to only valid app directories
            VALID_APPS=""
            for app in $APPS; do
              if [ -f "iotopps/$app/Dockerfile" ]; then
                VALID_APPS="$VALID_APPS $app"
              fi
            done
            
            if [ -z "$VALID_APPS" ]; then
              APPS='[]'
            else
              APPS=$(echo $VALID_APPS | jq -R -s -c 'split(" ") | map(select(length > 0))')
            fi
          else
            # Build all apps
            APPS=$(ls -d iotopps/*/ | xargs -n1 basename | jq -R -s -c 'split("\n") | map(select(length > 0))')
          fi
          
          echo "apps=$APPS" >> $GITHUB_OUTPUT
          echo "Applications to build: $APPS"

  build-test:
    name: Build & Test ${{ matrix.app }}
    runs-on: ubuntu-latest
    needs: [detect-apps]
    if: needs.detect-apps.outputs.apps != '[]'
    strategy:
      matrix:
        app: ${{ fromJson(needs.detect-apps.outputs.apps) }}
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./iotopps/${{ matrix.app }}
          push: false
          tags: ${{ matrix.app }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true

      - name: Test Docker image
        run: |
          echo "Testing image for ${{ matrix.app }}..."
          
          # Check if image was built
          docker images ${{ matrix.app }}:test
          
          # Run basic image inspection
          docker inspect ${{ matrix.app }}:test
          
          # Check for common vulnerabilities (if trivy is needed, install it)
          echo "Image built successfully and ready for deployment"

      - name: Validate Kubernetes manifests
        run: |
          DEPLOYMENT_FILE="iotopps/${{ matrix.app }}/deployment.yaml"
          
          if [ ! -f "$DEPLOYMENT_FILE" ]; then
            echo "⚠️ Warning: deployment.yaml not found for ${{ matrix.app }}"
            exit 0
          fi
          
          # Install kubeval for validation
          wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
          tar xf kubeval-linux-amd64.tar.gz
          sudo mv kubeval /usr/local/bin
          
          # Validate Kubernetes manifest
          kubeval --strict "$DEPLOYMENT_FILE" || echo "⚠️ Validation warnings found"

      - name: Check for required files
        run: |
          APP_DIR="iotopps/${{ matrix.app }}"
          
          echo "Checking required files for ${{ matrix.app }}..."
          
          # Check Dockerfile
          if [ ! -f "$APP_DIR/Dockerfile" ]; then
            echo "❌ Dockerfile missing"
            exit 1
          else
            echo "✅ Dockerfile found"
          fi
          
          # Check deployment.yaml
          if [ ! -f "$APP_DIR/deployment.yaml" ]; then
            echo "⚠️ deployment.yaml missing"
          else
            echo "✅ deployment.yaml found"
          fi
          
          # Check requirements.txt or package.json
          if [ -f "$APP_DIR/requirements.txt" ]; then
            echo "✅ requirements.txt found (Python app)"
          elif [ -f "$APP_DIR/package.json" ]; then
            echo "✅ package.json found (Node.js app)"
          else
            echo "⚠️ No dependency file found"
          fi
          
          # Check README
          if [ -f "$APP_DIR/README.md" ]; then
            echo "✅ README.md found"
          else
            echo "⚠️ README.md missing"
          fi

      - name: Build Summary
        if: success()
        run: |
          cat << EOF >> $GITHUB_STEP_SUMMARY
          ## ✅ Build Successful: ${{ matrix.app }}
          
          **Image:** ${{ matrix.app }}:test  
          **Status:** Build and validation completed successfully
          
          ### Next Steps
          - Merge to trigger automatic deployment (if configured)
          - Or manually deploy using the "Deploy IoT Edge Application" workflow
          EOF

      - name: Comment on PR
        if: github.event_name == 'pull_request' && success()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ✅ Build Successful: ${{ matrix.app }}
              
              Docker image built and validated successfully.
              
              Ready for deployment to IoT Edge cluster.
              
              [View workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`
            })

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [detect-apps, build-test]
    if: always()
    steps:
      - name: Check build results
        run: |
          if [ "${{ needs.build-test.result }}" == "success" ]; then
            echo "✅ All builds completed successfully"
            exit 0
          elif [ "${{ needs.build-test.result }}" == "skipped" ]; then
            echo "⏭️ No applications to build"
            exit 0
          else
            echo "❌ Some builds failed"
            exit 1
          fi
